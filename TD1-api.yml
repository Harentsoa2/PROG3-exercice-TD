openapi: 3.0.0
info:
  title: Library Management API
  version: 1.0.0
  description: API for managing books and authors in a library.
servers:
  - url: https://mock-server.swaggerhub.com/HEIHARENTSOA/library/1.0.0
    description: Mock Server

paths:
  /books:
    get:
      tags:
        - Book
      summary: Get a list of books
      description: Retrieve a list of books with optional filters.
      parameters:
        - name: bookName
          in: query
          description: Filter by book name.
          required: false
          schema:
            type: string
        - name: startDate
          in: query
          description: Filter books released after this date.
          required: false
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          description: Filter books released before this date.
          required: false
          schema:
            type: string
            format: date
      responses:
        '200':
          description: A list of books.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'

    post:
      tags:
        - Book
      summary: Create a new book
      description: Add a new book to the library.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '201':
          description: Book created successfully.

    put:
      tags:
        - Book
      summary: Update an existing book
      description: Update a book's details. This operation is idempotent.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '200':
          description: Book updated successfully.

    delete:
      tags:
        - Book
      summary: Delete a book
      description: Remove a book from the library.
      parameters:
        - name: bookId
          in: query
          description: The ID of the book to delete.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Book deleted successfully.

  /authors:
    get:
      tags:
        - Author
      summary: Get a list of authors
      description: Retrieve a list of authors with optional filters.
      parameters:
        - name: authorName
          in: query
          description: Filter by author name.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A list of authors.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'

    post:
      tags:
        - Author
      summary: Create a new author
      description: Add a new author to the library.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        '201':
          description: Author created successfully.

    put:
      tags:
        - Author
      summary: Update an existing author
      description: Update an author's details. This operation is idempotent.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        '200':
          description: Author updated successfully.

    delete:
      tags:
        - Author
      summary: Delete an author
      description: Remove an author from the library.
      parameters:
        - name: authorId
          in: query
          description: The ID of the author to delete.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Author deleted successfully.

components:
  schemas:
    Book:
      type: object
      properties:
        ID:
          type: string
          description: The unique identifier for a book.
        bookName:
          type: string
          description: The name of the book.
        author:
          type: string
          description: The name of the author.
        pageNumbers:
          type: integer
          description: The number of pages in the book.
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
          description: The topic of the book.
        releaseDate:
          type: string
          format: date
          description: The release date of the book.

    Author:
      type: object
      properties:
        ID:
          type: string
          description: The unique identifier for an author.
        Name:
          type: string
          description: The name of the author.
        Sex:
          type: string
          enum:
            - M
            - F
          description: The gender of the author.
