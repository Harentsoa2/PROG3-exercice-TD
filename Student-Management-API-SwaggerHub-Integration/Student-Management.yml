{
  "openapi" : "3.0.0",
  "info" : {
    "title" : "Group and Student Management API",
    "description" : "API for managing groups and students. Allows creation, updates, retrieval, and deletion of groups and students.",
    "version" : "2.0.0"
  },
  "servers" : [ {
    "url" : "https://virtserver.swaggerhub.com/HEIHARENTSOA/Student-Management-API/2.0.0",
    "description" : "SwaggerHub API Auto Mocking"
  }, {
    "url" : "https://mockserver.swaggerhub.com/HEIHARENTSOAStudent-Management-API/1.0.0",
    "description" : "Base URL to access the API."
  } ],
  "paths" : {
    "/groups" : {
      "get" : {
        "tags" : [ "Group" ],
        "summary" : "Retrieve a list of groups",
        "description" : "Returns all existing groups with optional filtering by name (`groupName`) or year range (`groupYear`).",
        "parameters" : [ {
          "name" : "groupName",
          "in" : "query",
          "description" : "Filter groups by name.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "groupYear",
          "in" : "query",
          "description" : "Filter groups by a year range.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "pattern" : "^\\d{4}-\\d{4}$",
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page number (starting from 1).",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "default" : 1
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "Number of items per page.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "default" : 10
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully returned a list of groups.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Group"
                  }
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Group" ],
        "summary" : "Update or replace an existing group (idempotent).",
        "description" : "Updates the details of an existing group or creates it if it doesn't exist. The `id` is generated server-side.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GroupRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Group successfully updated or created.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Group"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Group" ],
        "summary" : "Create a new group",
        "description" : "Creates a group without specifying an `id`. The `id` is generated by the system.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GroupRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Group successfully created. The response includes the generated `id`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Group"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Group" ],
        "summary" : "Delete a group",
        "description" : "Deletes a group by its `id`.",
        "parameters" : [ {
          "name" : "groupID",
          "in" : "query",
          "description" : "ID of the group to delete.",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Group successfully deleted."
          }
        }
      }
    },
    "/students" : {
      "get" : {
        "tags" : [ "Student" ],
        "summary" : "Retrieve a list of students",
        "description" : "Returns all existing students with optional filtering by name (`studentName`).",
        "parameters" : [ {
          "name" : "studentName",
          "in" : "query",
          "description" : "Filter students by name.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Page number (starting from 1).",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "default" : 1
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "Number of items per page.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "default" : 10
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully returned a list of students.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Student"
                  }
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Student" ],
        "summary" : "Update or replace an existing student (idempotent).",
        "description" : "Updates the details of an existing student or creates it if it doesn't exist. The `id` is generated server-side.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/StudentRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Student successfully updated or created.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Student"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Student" ],
        "summary" : "Create a new student",
        "description" : "Creates a student without specifying an `id`. The `id` is generated by the system.",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/StudentRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Student successfully created. The response includes the generated `id`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Student"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Student" ],
        "summary" : "Delete a student",
        "description" : "Deletes a student by its `id`.",
        "parameters" : [ {
          "name" : "studentID",
          "in" : "query",
          "description" : "ID of the student to delete.",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Student successfully deleted."
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "GroupRequest" : {
        "type" : "object",
        "properties" : {
          "groupName" : {
            "type" : "string",
            "description" : "Name of the group."
          },
          "groupYear" : {
            "type" : "integer",
            "description" : "Year the group operates."
          },
          "promotion" : {
            "type" : "string",
            "description" : "Promotion level.",
            "enum" : [ "G", "H", "J", "K" ]
          },
          "studentNb" : {
            "type" : "integer",
            "description" : "Number of students in the group."
          },
          "students" : {
            "type" : "array",
            "description" : "List of students in the group (optional).",
            "items" : {
              "$ref" : "#/components/schemas/Student"
            }
          }
        }
      },
      "Group" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/GroupRequest"
        }, {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "string",
              "description" : "Unique identifier of the group."
            }
          }
        } ]
      },
      "StudentRequest" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Name of the student."
          },
          "sex" : {
            "type" : "string",
            "description" : "Gender of the student (M or F).",
            "enum" : [ "M", "F" ]
          },
          "birthdate" : {
            "type" : "string",
            "description" : "Student's birth date (format YYYY-MM-DD).",
            "format" : "date"
          },
          "reference" : {
            "type" : "string",
            "description" : "Unique reference of the student."
          },
          "group" : {
            "$ref" : "#/components/schemas/Group"
          }
        }
      },
      "Student" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/StudentRequest"
        }, {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "string",
              "description" : "Unique identifier of the student."
            }
          }
        } ]
      }
    }
  }
}